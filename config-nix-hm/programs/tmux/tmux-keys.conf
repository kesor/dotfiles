# KEY BINDINGS

# Set the prefix to ^A.
# unbind C-a
unbind C-b
set -g prefix C-a
bind a send-prefix

# Log:  prefix ~  -- Show messages

set-option -gw xterm-keys on

# TEST KEYS:
# prefix / - Describe key binding

# SESSIONS!
# bind-key    -T prefix C-s     choose-tree -Zs
bind-key    -T prefix C-s     run-shell -b "tmux-sessions popup"
bind-key    -T prefix N       command-prompt "new-session -A -s '%%'"
bind-key    -T prefix $       command-prompt -I "#S" "rename-session -- '%%'"
bind-key    -T prefix (       switch-client -p
bind-key    -T prefix )       switch-client -n
bind-key    -T prefix L       switch-client -l


# WINDOWS!
bind-key    -T prefix C-a     last-window
bind-key    -T prefix n       next-window
unbind-key  -T prefix M-n #   next-window -a
bind-key    -T prefix Space   next-window
bind-key    -T prefix C-Space next-window
bind-key    -T prefix p       previous-window
unbind-key  -T prefix M-p #   previous-window -a
bind-key    -T prefix c       new-window
bind-key    -T prefix C-c     new-window
bind-key    -T prefix .       command-prompt "move-window -t '%%'"

bind-key    -T prefix A       command-prompt -I "#W" "rename-window -- '%%'"
bind-key    -T prefix ,       command-prompt -I "#W" "rename-window -- '%%'"
bind-key    -T prefix \'      command-prompt -p index "select-window -t ':%%'"
unbind-key  -T prefix & #     confirm-before -p "kill-window #W? (y/n)" kill-window
bind-key    -T prefix K       confirm-before -p "kill-window #W? (y/n)" kill-window

bind-key    -T prefix f       command-prompt "find-window -Z -- '%%'"
# bind-key  -T prefix w       choose-window # list-windows
# bind-key  -T prefix C-w     choose-window # list-windows
bind-key    -T prefix       C-w                   choose-tree -w
bind-key    -T prefix       w                     choose-tree -w
# bind-key  -T prefix '"'     choose-window


# CLIENT / SERVER
bind-key    -T prefix C-d     detach-client
bind-key    -T prefix d       detach-client
bind-key    -T prefix C-z     suspend-client
bind-key    -T prefix D       choose-client -Z
bind-key -r -T prefix DC      refresh-client -c
bind-key    -T prefix C-x     lock-server
bind-key    -T prefix x       lock-server
bind-key    -T prefix t       clock-mode
# reload configuration
bind-key    -T prefix r       source-file ~/.config/tmux/tmux.conf \; display-message "tmux.conf reloaded"
bind-key    -T prefix C-r     source-file ~/.config/tmux/tmux.conf \; display-message "tmux.conf reloaded"


# PANES!
# split windows like vim
# vim's definition of a horizontal/vertical split is reversed from tmux's
# -- default: prefix i - Display window information
bind-key    -T prefix s       split-window -v -c "#{pane_current_path}"
bind-key    -T prefix S       split-window -fv -c "#{pane_current_path}"
bind-key    -T prefix v       split-window -h -c "#{pane_current_path}"
bind-key    -T prefix V       split-window -fh -c "#{pane_current_path}"
unbind-key  -T prefix \\ #    split-window -h -c "#{pane_current_path}"
unbind-key  -T prefix |  #    split-window -fh -c "#{pane_current_path}"
unbind-key  -T prefix -  #    split-window -v -c "#{pane_current_path}"
unbind-key  -T prefix _  #    split-window -fv -c "#{pane_current_path}"

# resize panes
bind-key -r -T prefix < resize-pane -L 1
bind-key -r -T prefix > resize-pane -R 1
bind-key -r -T prefix + resize-pane -U 2
bind-key -r -T prefix - resize-pane -D 1
unbind-key  -T prefix M-Up    # resize-pane -U 5
unbind-key  -T prefix M-Down  # resize-pane -D 5
unbind-key  -T prefix M-Left  # resize-pane -L 5
unbind-key  -T prefix M-Right # resize-pane -R 5
unbind-key  -T prefix C-Up    # resize-pane -U
unbind-key  -T prefix C-Down  # resize-pane -D
unbind-key  -T prefix C-Left  # resize-pane -L
unbind-key  -T prefix C-Right # resize-pane -R
unbind-key  -T prefix <       # display-menu -T "#[align=centre]#{window_index}:#{window_name}" -x W -y S "Swap Left" l "swap-window -t:-1" "Swap Right" r "swap-window -t:+1" "#{?pane_marked_set,,-}Swap Marked" s swap-window  Kill X kill-window Respawn R "respawn-window -k" "#{?pane_marked,Unmark,Mark}" m "select-pane -m" Rename n "command-prompt -I \"#W\" \"rename-window -- '%%'\""  "New After" w "new-window -a" "New At End" W new-window
unbind-key  -T prefix >       # display-menu -T "#[align=centre]#{pane_index} (#{pane_id})" -x P -y P "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" C-r "copy-mode -t=; send -Xt= search-backward \"#{q:mouse_word}\"" "#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}" C-y "send-keys -l -- \"#{q:mouse_word}\"" "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" c "set-buffer -- \"#{q:mouse_word}\"" "#{?mouse_line,Copy Line,}" l "set-buffer -- \"#{q:mouse_line}\""  "Horizontal Split" h "split-window -h" "Vertical Split" v "split-window -v"  "Swap Up" u "swap-pane -U" "Swap Down" d "swap-pane -D" "#{?pane_marked_set,,-}Swap Marked" s swap-pane  Kill X kill-pane Respawn R "respawn-pane -k" "#{?pane_marked,Unmark,Mark}" m "select-pane -m" "#{?window_zoomed_flag,Unzoom,Zoom}" z "resize-pane -Z"
# zoomzoom!
bind-key    -T prefix z       resize-pane -Z

# -- default: prefix E    Spread panes out evenly
# -- default: prefix M-1  set even-horizontal layout
# -- default: prefix M-2  set even-vertial layout
# -- default: prefix M-3  set main-horizontal layout
# -- default: prefix M-4  set main-vertial layout
# -- default: prefix M-5  Select the tiled layout
# -- default: prefix {    Swap pane up ( } for down )



# move around panes with hjkl, as one would in vim after pressing ctrl-w
bind-key    -T prefix C-M-h       select-pane -L
bind-key    -T prefix C-M-j       select-pane -D
bind-key    -T prefix C-M-k       select-pane -U
bind-key    -T prefix C-M-l       select-pane -R

bind-key    -T prefix m       select-pane -m
unbind-key  -T prefix M       # select-pane -M
unbind-key  -T prefix m       # select-pane -m
unbind-key  -T prefix o       # select-pane -t :.+
unbind-key  -T prefix Up      # select-pane -U
unbind-key  -T prefix Down    # select-pane -D
unbind-key  -T prefix Left    # select-pane -L
unbind-key  -T prefix Right   # select-pane -R
bind-key    -T prefix C-p     command-prompt -I "#T" "select-pane -T '%%'"
bind-key    -T prefix P       set pane-border-status

# move panes around
bind-key    -T prefix !       break-pane
bind-key    -T prefix q       display-panes
bind-key    -T prefix \{      swap-pane -U
bind-key    -T prefix \}      swap-pane -D
unbind-key  -T prefix \; #    last-pane
bind-key    -T prefix C-o     rotate-window
unbind-key  -T prefix M-o #   rotate-window -D

# BUFFERS!
bind-key    -T prefix \#      list-buffers
bind-key    -T prefix =       choose-buffer -Z
bind-key    -T prefix [       copy-mode
bind-key    -T prefix ]       paste-buffer

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
bind-key -n 'M-C-h' if-shell "$is_vim" 'send-keys M-C-h' 'select-pane -L'
bind-key -n 'M-C-j' if-shell "$is_vim" 'send-keys M-C-j' 'select-pane -D'
bind-key -n 'M-C-k' if-shell "$is_vim" 'send-keys M-C-k' 'select-pane -U'
bind-key -n 'M-C-l' if-shell "$is_vim" 'send-keys M-C-l' 'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([1-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'M-C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'M-C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'M-C-h' select-pane -L
bind-key -T copy-mode-vi 'M-C-j' select-pane -D
bind-key -T copy-mode-vi 'M-C-k' select-pane -U
bind-key -T copy-mode-vi 'M-C-l' select-pane -R
bind-key -T copy-mode-vi 'M-C-\' select-pane -l

# copy into buffer with SHIFT + Mouse1
# unbind-key  -T root           MouseDrag1Pane    #   if-shell -F -t = "#{mouse_any_flag}" "if -Ft= \"#{pane_in_mode}\" \"copy-mode -M\" \"send-keys -M\"" "copy-mode -M"
# bind-key    -T root         S-MouseDrag1Pane        if-shell -F -t = "#{mouse_any_flag}" "if -Ft= \"#{pane_in_mode}\" \"copy-mode -M\" \"send-keys -M\"" "copy-mode -M"
# bind-key    -T copy-mode      MouseDrag1Pane        select-pane \; send-keys -X begin-selection
# bind-key    -T copy-mode    S-MouseDrag1Pane        select-pane \; send-keys -X begin-selection
# bind-key    -T copy-mode      MouseDragEnd1Pane     send-keys -X copy-selection-and-cancel
# bind-key    -T copy-mode    S-MouseDragEnd1Pane     send-keys -X copy-selection-and-cancel
