# vi-style controls
set -g mode-keys vi
set -g status-keys vi

# how long to wait after an escape
set -g escape-time 0

# history
set -g history-limit 100000
set -g history-file ~/.tmux/tmuxhistory

set -g monitor-activity on
set -g visual-activity off
set -g bell-action none

# start counting from 1
set -g base-index 1
set -g pane-base-index 1

### colorscheme:
# bg:#111111  fg:#dddddd
# bg:#333333  fg:#dddddd
# bg:#555555  fg:#dddddd
#
# bg:#bbbbbb  fg:#333333
# bg:#dddddd  fg:#333333
# bg:#ffffff  fg:#333333

set-option -g pane-border-format " [#P] #T "
set-option -g pane-border-style bg=default,fg=#555555
set-option -g pane-active-border-style bg=default,fg=#bbbbbb

set-option -g status on
set-option -g status-position bottom
set-option -g status-interval 10
set-option -g status-fg "#dddddd"
set-option -g status-bg "#111111"

set -g status-left-length 20
set -g status-left ' #[fg=#555555] #S '

set-option -g window-status-activity-style "noreverse"

set-option -g window-status-bell-style "none,noreverse,fg=#ffffff,bg=#000000"
set-option -g message-style "fg=#111111,bg=#ff9999"

PLSEP=" "
set-option -g window-status-separator ""
# PLSEP="\ue0c5"
# PLSEP="\ue0c7"
# PLSEP="\ue0ba"
PLSEP="\ue0be"
# PLSEP="\ue0c2"

set-option -g window-status-format "#[fg=#333333]$PLSEP#[fg=#bbbbbb,bg=#333333] #I#{?window_flags,#F, }#{=7:window_name}#[bg=#333333,fg=#111111] $PLSEP"
set-option -g window-status-current-format "#[fg=#777777]$PLSEP#[fg=#dddddd,bg=#777777] #[fg=#ffffff]#I#[fg=#111111]#{?window_flags,#F, }#[fg=#ffffff]#{=7:window_name}#[bg=#777777,fg=#111111] $PLSEP"

# WHOAMI="#[fg=#555555]$PLSEP#[fg=#ffffff,bg=#555555] #(whoami)@#h" 
DATEST="#[fg=#bbbbbb]$PLSEP#[fg=#000000,bg=#bbbbbb] \u231b%a, %d %b %H:%M "
set-option -g status-right-length 120
set-option -g status-right "$DATEST"

# set -g automatic-rename off
# set -g set-titles on
# set -g set-titles-string '#T'

# hardstatus string '%{=b bY} %D %02d/%02m %0c %{k}|%{G} %l %{k}|%{W} %-w%{=b dd}[%n] %t %{-}%+w %= %h'

#   {=b bY}  - bold transparent background, bold bright yellow foreground
#   %D       - weekday name
#   %02d/02m - day number, month number
#   %0c      - current time in HH::MM 24h format
#   %{k}     - black background
#   |
#   %{G}     - bright green backround
#   %l       - current system load
#   %{k}     - black background
#   |        - pipe
#   %{W}     - bright white
#   %-w      - remove white from colors
#   %{=b dd} - bold background, dim default foreground
#   [        - bracket
#   %n       - window number
#   ]        - bracket
#   %t       - window title
#   %{-}     - remove color ?
#   %+w      - add white
#   %=       - pad all the way to right
#   %h       - hardstatus of window

# KEY BINDINGS

# Set the prefix to ^A.
# unbind C-a
unbind C-b
set -g prefix ^A
bind a send-prefix

# SESSIONS!
bind-key    -T prefix       C-s                   choose-tree -Zs

# WINDOWS!
bind-key    -T prefix C-a     last-window
bind-key    -T prefix n       next-window
unbind-key  -T prefix M-n #   next-window -a
bind-key    -T prefix Space   next-window
bind-key    -T prefix C-Space next-window
bind-key    -T prefix p       previous-window
unbind-key  -T prefix M-p #   previous-window -a
bind-key    -T prefix c       new-window
bind-key    -T prefix C-c     new-window
bind-key    -T prefix .       command-prompt "move-window -t '%%'"

bind-key    -T prefix A       command-prompt -I "#W" "rename-window -- '%%'"
bind-key    -T prefix ,       command-prompt -I "#W" "rename-window -- '%%'"
bind-key    -T prefix \'      command-prompt -p index "select-window -t ':%%'"
unbind-key  -T prefix & #     confirm-before -p "kill-window #W? (y/n)" kill-window
bind-key    -T prefix K       confirm-before -p "kill-window #W? (y/n)" kill-window

bind-key    -T prefix f       command-prompt "find-window -Z -- '%%'"
# bind-key  -T prefix w       choose-window # list-windows
# bind-key  -T prefix C-w     choose-window # list-windows
bind-key    -T prefix       C-w                   choose-tree -w
bind-key    -T prefix       w                     choose-tree -w
# bind-key  -T prefix '"'     choose-window


# CLIENT / SERVER
bind-key    -T prefix C-d     detach-client
bind-key    -T prefix d       detach-client
bind-key    -T prefix C-z     suspend-client
bind-key    -T prefix (       switch-client -p
bind-key    -T prefix )       switch-client -n
bind-key    -T prefix D       choose-client -Z
bind-key    -T prefix L       switch-client -l
bind-key -r -T prefix DC      refresh-client -c
bind-key    -T prefix C-x     lock-server
bind-key    -T prefix x       lock-server
bind-key    -T prefix t       clock-mode
# reload configuration
bind-key    -T prefix r       source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"
bind-key    -T prefix C-r     source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"


# PANES!
# split windows like vim
# vim's definition of a horizontal/vertical split is reversed from tmux's
bind-key    -T prefix s       split-window -v -c "#{pane_current_path}"
bind-key    -T prefix S       split-window -fv -c "#{pane_current_path}"
bind-key    -T prefix v       split-window -h -c "#{pane_current_path}"
bind-key    -T prefix V       split-window -fh -c "#{pane_current_path}"
unbind-key  -T prefix \\ #    split-window -h -c "#{pane_current_path}"
unbind-key  -T prefix |  #    split-window -fh -c "#{pane_current_path}"
unbind-key  -T prefix -  #    split-window -v -c "#{pane_current_path}"
unbind-key  -T prefix _  #    split-window -fv -c "#{pane_current_path}"

# resize panes
bind-key -r -T prefix < resize-pane -L 1
bind-key -r -T prefix > resize-pane -R 1
bind-key -r -T prefix + resize-pane -U 2
bind-key -r -T prefix - resize-pane -D 1
unbind-key  -T prefix M-Up    # resize-pane -U 5
unbind-key  -T prefix M-Down  # resize-pane -D 5
unbind-key  -T prefix M-Left  # resize-pane -L 5
unbind-key  -T prefix M-Right # resize-pane -R 5
unbind-key  -T prefix C-Up    # resize-pane -U
unbind-key  -T prefix C-Down  # resize-pane -D
unbind-key  -T prefix C-Left  # resize-pane -L
unbind-key  -T prefix C-Right # resize-pane -R
unbind-key  -T prefix <       # display-menu -T "#[align=centre]#{window_index}:#{window_name}" -x W -y S "Swap Left" l "swap-window -t:-1" "Swap Right" r "swap-window -t:+1" "#{?pane_marked_set,,-}Swap Marked" s swap-window  Kill X kill-window Respawn R "respawn-window -k" "#{?pane_marked,Unmark,Mark}" m "select-pane -m" Rename n "command-prompt -I \"#W\" \"rename-window -- '%%'\""  "New After" w "new-window -a" "New At End" W new-window
unbind-key  -T prefix >       # display-menu -T "#[align=centre]#{pane_index} (#{pane_id})" -x P -y P "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" C-r "copy-mode -t=; send -Xt= search-backward \"#{q:mouse_word}\"" "#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}" C-y "send-keys -l -- \"#{q:mouse_word}\"" "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" c "set-buffer -- \"#{q:mouse_word}\"" "#{?mouse_line,Copy Line,}" l "set-buffer -- \"#{q:mouse_line}\""  "Horizontal Split" h "split-window -h" "Vertical Split" v "split-window -v"  "Swap Up" u "swap-pane -U" "Swap Down" d "swap-pane -D" "#{?pane_marked_set,,-}Swap Marked" s swap-pane  Kill X kill-pane Respawn R "respawn-pane -k" "#{?pane_marked,Unmark,Mark}" m "select-pane -m" "#{?window_zoomed_flag,Unzoom,Zoom}" z "resize-pane -Z"
# zoomzoom!
bind-key    -T prefix z       resize-pane -Z

# move around panes with hjkl, as one would in vim after pressing ctrl-w
bind-key    -T prefix h       select-pane -L
bind-key    -T prefix j       select-pane -D
bind-key    -T prefix k       select-pane -U
bind-key    -T prefix l       select-pane -R
bind-key    -T prefix m       select-pane -m
unbind-key  -T prefix M       # select-pane -M
unbind-key  -T prefix m       # select-pane -m
unbind-key  -T prefix o       # select-pane -t :.+
unbind-key  -T prefix Up      # select-pane -U
unbind-key  -T prefix Down    # select-pane -D
unbind-key  -T prefix Left    # select-pane -L
unbind-key  -T prefix Right   # select-pane -R
bind-key    -T prefix C-p     command-prompt -I "#T" "select-pane -T '%%'"
bind-key    -T prefix P       set pane-border-status

# move panes around
bind-key    -T prefix !       break-pane
bind-key    -T prefix q       display-panes
bind-key    -T prefix \{      swap-pane -U
bind-key    -T prefix \}      swap-pane -D
unbind-key  -T prefix \; #    last-pane
bind-key    -T prefix C-o     rotate-window
unbind-key  -T prefix M-o #   rotate-window -D


# BUFFERS!
bind-key    -T prefix \#      list-buffers
bind-key    -T prefix =       choose-buffer -Z
bind-key    -T prefix [       copy-mode
bind-key    -T prefix ]       paste-buffer

# copy into buffer with SHIFT + Mouse1
# unbind-key  -T root           MouseDrag1Pane    #   if-shell -F -t = "#{mouse_any_flag}" "if -Ft= \"#{pane_in_mode}\" \"copy-mode -M\" \"send-keys -M\"" "copy-mode -M"
# bind-key    -T root         S-MouseDrag1Pane        if-shell -F -t = "#{mouse_any_flag}" "if -Ft= \"#{pane_in_mode}\" \"copy-mode -M\" \"send-keys -M\"" "copy-mode -M"
# bind-key    -T copy-mode      MouseDrag1Pane        select-pane \; send-keys -X begin-selection
# bind-key    -T copy-mode    S-MouseDrag1Pane        select-pane \; send-keys -X begin-selection
# bind-key    -T copy-mode      MouseDragEnd1Pane     send-keys -X copy-selection-and-cancel
# bind-key    -T copy-mode    S-MouseDragEnd1Pane     send-keys -X copy-selection-and-cancel


# MOUSE!
set -g mouse off
bind-key    -T prefix       m                       set -g mouse\; display 'Mouse: #{?mouse,ON,OFF}'
bind-key    -T prefix       C-m                     set -g mouse\; display 'Mouse: #{?mouse,ON,OFF}'
bind-key    -T root         M-MouseDown3Pane        display-menu -T "#[align=centre]#{pane_index} (#{pane_id})" -t = -x M -y M "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" C-r "copy-mode -t=; send -Xt= search-backward \"#{q:mouse_word}\"" "#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}" C-y "send-keys -l -- \"#{q:mouse_word}\"" "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" c "set-buffer -- \"#{q:mouse_word}\"" "#{?mouse_line,Copy Line,}" l "set-buffer -- \"#{q:mouse_line}\""  "Horizontal Split" h "split-window -h" "Vertical Split" v "split-window -v"  "Swap Up" u "swap-pane -U" "Swap Down" d "swap-pane -D" "#{?pane_marked_set,,-}Swap Marked" s swap-pane  Kill X kill-pane Respawn R "respawn-pane -k" "#{?pane_marked,Unmark,Mark}" m "select-pane -m" "#{?window_zoomed_flag,Unzoom,Zoom}" z "resize-pane -Z"
bind-key    -T root         MouseDown1Pane          select-pane -t = \; send-keys -M
bind-key    -T root         MouseDown1Status        select-window -t =
bind-key    -T root         MouseDown2Pane          if-shell -F -t = "#{||:#{mouse_any_flag},#{pane_in_mode}}" "select-pane -t=; send-keys -M" "display-menu -t= -xM -yM -T \"#[align=centre]#{pane_index} (#{pane_id})\"  '#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}' 'C-r' {copy-mode -t=; send -Xt= search-backward \"#{q:mouse_word}\"} '#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}' 'C-y' {send-keys -l -- \"#{q:mouse_word}\"} '#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}' 'c' {set-buffer -- \"#{q:mouse_word}\"} '#{?mouse_line,Copy Line,}' 'l' {set-buffer -- \"#{q:mouse_line}\"} '' 'Horizontal Split' 'h' {split-window -h} 'Vertical Split' 'v' {split-window -v} '' 'Swap Up' 'u' {swap-pane -U} 'Swap Down' 'd' {swap-pane -D} '#{?pane_marked_set,,-}Swap Marked' 's' {swap-pane} '' 'Kill' 'X' {kill-pane} 'Respawn' 'R' {respawn-pane -k} '#{?pane_marked,Unmark,Mark}' 'm' {select-pane -m} '#{?window_zoomed_flag,Unzoom,Zoom}' 'z' {resize-pane -Z}"
bind-key    -T root         MouseDown2Status        display-menu -T "#[align=centre]#{window_index}:#{window_name}" -t = -x W -y S "Swap Left" l "swap-window -t:-1" "Swap Right" r "swap-window -t:+1" "#{?pane_marked_set,,-}Swap Marked" s swap-window  Kill X kill-window Respawn R "respawn-window -k" "#{?pane_marked,Unmark,Mark}" m "select-pane -m" Rename n "command-prompt -I \"#W\" \"rename-window -- '%%'\""  "New After" w "new-window -a" "New At End" W new-window
bind-key    -T root         MouseDown2StatusLeft    display-menu -T "#[align=centre]#{session_name}" -t = -x M -y S Next n "switch-client -n" Previous p "switch-client -p"  Renumber N "move-window -r" Rename n "command-prompt -I \"#S\" \"rename-session -- '%%'\""  "New Session" s new-session "New Window" w new-window
bind-key    -T root         MouseDown2StatusRight   display-menu -T "#[align=centre]#{client_name}" -t = -x M -y S Detach d detach-client "Detach & Kill" X "detach-client -P" "Detach Others" o "detach-client -a"  Lock l lock-client
bind-key    -T root         MouseDrag1Pane          if-shell -F -t = "#{mouse_any_flag}" "if -Ft= \"#{pane_in_mode}\" \"copy-mode -M\" \"send-keys -M\"" "copy-mode -M"
bind-key    -T root         WheelUpPane             if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= \"#{pane_in_mode}\" \"send-keys -M\" \"copy-mode -et=\""
bind-key    -T root         WheelUpStatus           previous-window
bind-key    -T root         WheelDownStatus         next-window

source-file -q ~/.tmux.conf.local
